Process Notes
=============

Basic Website
================

    PHASE 1: Setting up the project
    ===============================
        STEP 1: Create a project folder.
        STEP 2: Install express using "npm install -g express"
        STEP 3: Create a .js file for your entry point (i.e. index.js, app.js, etc)
        STEP 4: Initialize npm using "npm init"


    PHASE 2: Install dependencies
    ==============================
        o   To install dependencies there are two ways: 
                1. specify the dependencies in your package.json files and then when you are done, run "npm install" in gitbash
                2. Install each and every dependency 
        
        
        STEP 5.1A: Add dependencies by adding another property to your package.json file at the bottom:

                "dependencies": {
                "body-parser": "*",                           <== helps parse different types of data.  Note that the value is the version, but if you dont know the version use "*"
                "express": "*",                               <== latest version of express
                "pug": "*",                                   <== this is a templating engine (formerly jade)
                "nodemailer": "*",                            <== use this for form submissions
                }
            
        STEP 5.2A: In gitbash, write "npm install" to install all the dependencies above.
                o   Installation note:  It seems a little more intuitive to install dependencies like it is done above because you dont have to do "npm install x" 
                    for each and every dependency you want to initially add (although it might be best to use npm install x later on into the project purely because 
                    its less work at that later point).  Plus, you can easily put in the dependency version like in the method above.

            -------------------------------------------------------------------------------------------------------------------------------------
            (or)

            STEP 5B: Do an "npm install x" in gitbash where "x" is the package you want to install for each and every one of your dependencies:

                    npm install body-parser
                    npm install express
                    npm install pug
                    npm install nodemailer

                    (or) 

                    npm install body-parser express pug nodemailer
            -------------------------------------------------------------------------------------------------------------------------------------

        STEP 5.3: Look in your new node_modules folders to see if all your dependcies have been added.


    PHASE 3: Create a .gitignore file and add "node_modules" to it
    ===============================================================
        STEP 6.1: Create a .gitignore file so that you dont add the addtional weight to the git repo


    PHASE 4: In your app.js file, create a basic express server.
    =============================================================
        o   Note, the fist thing you see in your app are the "requires", which are built in node function that import
            an object (module.exports) from another file or folder.  So for example, when you write "const bodyParser = require(body-parser)",
            what you are doing 

        STEP 7: Setup your basic website and server
    
                    'use strict';
                                                                                            /* First, load modules you want to use in your application:*/
                    const express = require('express');                                         /* load (i.e. import) the express framework */          
                    const path = require('path');                                               /* load the path module to handle paths (note: since this is a root module, you dont need to list in dependencies) */
                    const bodyParser = require('body-parser');                                  /* load body-parser module is middleware that parses incoming request bodies in a middleware before handlers (available under req.body property)*/
                    const nodemailer = require('nodemailer');                                   /* load nodemailer to allow easy email sending */
                                                                                            /* Second, initialize the express app */
                    const app = express();                                                      /* initialize app by calling express and storing as "app" */
                                                                                            /* Third, set up your middleware */
                    app.use(bodyParser.json())                                                  /* bodyparser middleware that can parse json*/
                    app.use(bodyParser.urlencoded({extended: false}));                          /* bodyparser middleware that can parse url */

                    app.listen(3000, function() {                                           /* listen on port 3000 */
                        console.log('listening on port 3000...');                               /* log that the server is listenting on port 3000. */
                    });


        o   When you go to localhost:3000, you will see "Cannot GET /", which is because we have not
            created a route yet for any of our future pages.

        o   To test out a basic route, add a simple GET route that calls a function with a request and response object:

                    app.get('/', function(req, res) {
                        res.send('Hello there friend!')
                    });

        o   Note documentation on bodyparser middleware:
                     https://github.com/expressjs/body-parser#bodyparserurlencodedoptions -- body parser documentation



Basic Website with Routes and Views
====================================
    So now that you have a working server that can listen on a port (3000) and send a response to a given request, you
    now want to implement your website.  You can do this a few different ways:
            1. use the "pug" templating engine.
            2. Use static middleware for html files.

IF you want to use static html:
================================

    STEP 8: Load the static middleware that tell the app where your files will be: 

        app.use(express.static(path.join(__dirname + '/public')));   

    STEP 9: Create a folder called "public" where all your ststic files will be available.

    STEP 10: Inside your public folder, create your html files.


IF you want to use the pug templating engine:
=============================================

    STEP 8: Setup your "view engine".  A view engine enables you to use static template files in your application

        app.set('views', path.join(__dirname, 'views'));               /* This tells pug where the template files will be. and we pass 'views' as the first param and second param use path.join (normalize al args into a path string) is the location (directory name is "views") */       
        app.set('view engine', 'pug')                                  /* this tells express to use the pug view "templating" engine*/

    STEP 9: in your project folder, create a "views" folder.
        o   This "views" folder will hold all your static files.

    STEP 10: Inside your "views" folder, create a file called "index.pug".
        o   To test whether or not your "index.pug" file is working correctly, type in "h1 This is a test".
        o   What you should see is "This is a test" h1 element.  Press ctrl-u to see the source code.
        o   Also keep in mind the pug syntax, indentation, etc.
        o   In particular, pay attention to tab spacing formatting because you will get errors.

    STEP 11: 
        o   Interesting thing about pug is that you can shorten your development time by having a seperate file for something like a navigation bar (which
            would be on every page of your website anyway) and then simply "extends" it to the document you want to use it on.
        o   A basic example would be to:
            1. Create a "layouts.pug" file.
            2. Create some content in that file.
            3. In your index.pug file (for example), you would then write at the top of the document "extends layout"
                o   What happens here is that the module is loaded to that page!
            4. Then, add "block content" for the design on your page.

    Additional resources:
    https://jilles.me/getting-the-express-app-js/ -- good overview of express apps.
    https://bambielli.com/til/2016-12-27-app-use-app-all/ -- app.use vs app.all
    https://expressjs.com/en/guide/using-template-engines.html -- view engine documentation
